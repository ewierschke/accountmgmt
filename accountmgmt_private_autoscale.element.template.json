{
  "AWSTemplateFormatVersion": "2010-09-09",  
  "Conditions": {
    "ConfigureDiscovery": {
      "Fn::Not": [
        {
          "Fn::Equals": [
            {
              "Ref": "DiscoIAMGroup"
            },
            ""
          ]
        }
      ]
    }
  },
  "Description": "This template deploys a accountmgmt instance from launch config in an autoscale group using watchmaker.",
  "Parameters": {
    "AmiId": {
      "Description": "AMI ID",
      "Type": "String",
      "Default": ""
    },
    "DesiredCapacity": {
      "Description": "The number of instances the autoscale group will spin up initially",
      "Type": "String",
      "MinLength": "1",
      "Default": "1"
    },
    "DiscoIAMGroup": {
      "Default": "",
      "Description": "ID of the IAM group to be granted SSH Discovery access to PWM instances",
      "Type": "String"
    },
    "AdminIAMGroup": {
      "Description": "ID of the IAM group to be granted SSH access to accountmgmt instances",
      "Type": "String"
    },
    "InstanceType": {
      "Description": "Amazon EC2 instance type for the instance",
      "Type": "String",
      "Default": "t2.micro",
      "AllowedValues": [
        "t2.micro",
        "t2.small",
        "t2.medium",
        "t2.large",
        "t2.xlarge",
        "c4.large",
        "c4.xlarge",
        "m4.large",
        "m4.xlarge"
      ]
    },
    "KeyPairName": {
      "Description": "Public/private key pairs allow you to securely connect to your instance after it launches",
      "Type": "AWS::EC2::KeyPair::KeyName"
    },
    "LdapServer": {
      "Description": "Name of LDAP server from which to import accountmgmt users",
      "Type": "String",
      "Default": "ad.example.com",
      "MinLength": "1"
    },
    "MaxCapacity": {
      "Description": "The maximum number of instances for the autoscale group",
      "Type": "String",
      "MinLength": "1",
      "Default": "1"
    },
    "MinCapacity": {
      "Description": "The minimum number of instances for the autoscale group",
      "Type": "String",
      "MinLength": "1",
      "Default": "1"
    },
    "accountmgmtConfigBucketName": {
      "Description": "Name of the S3 bucket where the accountmgmt config should be pulled and stored",
      "Type": "String"
    },
    "PrivateSubnetIDs": {
      "Description": "Private Subnet ID where the accountmgmt instance(s) will run. (only select one, load balancing not tested)",
      "Type": "List<AWS::EC2::Subnet::Id>"
    },
    "SecurityGroupIdInstance": {
      "Description": "ID of the security group for instances",
      "Type": "AWS::EC2::SecurityGroup::Id"
    },
    "SvcAccountDN": {
      "Description": "Distinguished Name (DN) of the accountmgmt Service Account to query LDAP directory",
      "Type": "String",
      "Default": "CN=svc_account,CN=Users,DC=ad,DC=example,DC=com",
      "MinLength": "1"
    },
    "SvcAccountPassword": {
      "Description": "Password of the accountmgmt Service Account to query LDAP directory. Must be at least 8 characters containing letters, numbers and symbols",
      "Type": "String",
      "MinLength": "8",
      "MaxLength": "32",
      "AllowedPattern": "(?=^.{6,255}$)((?=.*\\d)(?=.*[A-Z])(?=.*[a-z])|(?=.*\\d)(?=.*[^A-Za-z0-9])(?=.*[a-z])|(?=.*[^A-Za-z0-9])(?=.*[A-Z])(?=.*[a-z])|(?=.*\\d)(?=.*[A-Z])(?=.*[^A-Za-z0-9]))^.*",
      "NoEcho": "true",
      "Default": "Password123"
    },
    "UsersOUDN": {
      "Description": "Distinguished Name (DN) of the path from which to import LDAP users",
      "Type": "String",
      "Default": "CN=Users,DC=ad,DC=example,DC=com",
      "MinLength": "1"
    }
  },
  "Resources": {
    "AllowAdminIAMGroupSSHKeyAccess": {
      "Properties": {
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Action": [
                "iam:GetGroup"
              ],
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:aws:iam::",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":group/",
                      {
                        "Ref": "AdminIAMGroup"
                      }
                    ]
                  ]
                }
              ]
            },
            {
              "Action": [
                "iam:ListSSHPublicKeys",
                "iam:GetSSHPublicKey"
              ],
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:aws:iam::",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":user/*"
                    ]
                  ]
                }
              ]
            }
          ]
        },
        "PolicyName": "AllowAdminIAMGroupSSHKeyAccess",
        "Roles": [
          {
            "Ref": "accountmgmtInstanceRole"
          }
        ]
      },
      "Type": "AWS::IAM::Policy"
    },
    "accountmgmtConfigInstanceS3Access": {
      "Properties": {
        "Description": "Policy for accountmgmt instance role to access appropriate s3 bucket for accountmgmt config",
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "s3:GetObject",
                "s3:PutObject",
                "s3:PutObjectAcl"
              ],
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:aws:s3:::",
                      {
                        "Ref": "accountmgmtConfigBucketName"
                      },
                      "/*"
                    ]
                  ]
                }
              ]
            }
          ],
          "Version": "2012-10-17"
        },
        "Roles": [
          {
            "Ref": "accountmgmtInstanceRole"
          }
        ]
      },
      "Type": "AWS::IAM::ManagedPolicy"
    },
    "accountmgmtAutoScalingGroup": {
      "CreationPolicy": {
        "ResourceSignal": {
          "Count": {
            "Ref": "DesiredCapacity"
          },
          "Timeout": "PT25M"
        }
      },
      "Properties": {
        "DesiredCapacity": {
          "Ref": "DesiredCapacity"
        },
        "HealthCheckGracePeriod": "3600",
        "HealthCheckType": "ELB",
        "LaunchConfigurationName": {
          "Ref": "accountmgmtLaunchConfig"
        },
        "MaxSize": {
          "Ref": "MaxCapacity"
        },
        "MinSize": {
          "Ref": "MinCapacity"
        },
        "Tags": [
          {
            "Key": "Name",
            "PropagateAtLaunch": "true",
            "Value": {
              "Ref": "AWS::StackName"
            }
          }
        ],
        "VPCZoneIdentifier": {
          "Ref": "PrivateSubnetIDs"
        }
      },
      "Type": "AWS::AutoScaling::AutoScalingGroup",
      "UpdatePolicy": {
        "AutoScalingReplacingUpdate": {
          "WillReplace": "true"
        }
      }
    },
    "accountmgmtInstanceProfile": {
      "Properties": {
        "Path": "/",
        "Roles": [
          {
            "Ref": "accountmgmtInstanceRole"
          }
        ]
      },
      "Type": "AWS::IAM::InstanceProfile"
    },
    "accountmgmtInstanceRole": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": [
                "sts:AssumeRole"
              ],
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "ec2.amazonaws.com"
                ]
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "Path": "/"
      },
      "Type": "AWS::IAM::Role"
    },
    "accountmgmtLaunchConfig": {
      "Metadata": {
        "AWS::CloudFormation::Init": {
          "configSets": {
            "NewConf": [
              "a-cfnsetup",
              "b-watchmaker",
              "c-preppackages",
              "g-selinuxconf",
              "h-mailsetup",
							"j-adminusersetup",
							{
								"Fn::If": [
									"ConfigureDiscovery",
									"k-discousersetup",
									{
										"Ref": "AWS::NoValue"
									}
								]
							},
							"l-cloudwatchagentsetup",
              "m-finalize"
            ]
          },
          "a-cfnsetup": {
            "files": {
              "/etc/cfn/cfn-hup.conf": {
                "content": {
                  "Fn::Join": [
                    "",
                    [
                      "[main]\n",
                      "stack=",
                      {
                        "Ref": "AWS::StackId"
                      },
                      "\n",
                      "region=",
                      {
                        "Ref": "AWS::Region"
                      },
                      "\n",
                      "interval=1",
                      "\n",
                      "verbose=true",
                      "\n"
                    ]
                  ]
                },
                "group": "root",
                "mode": "000400",
                "owner": "root"
              },
              "/etc/cfn/hooks.d/cfn-auto-reloader.conf": {
                "content": {
                  "Fn::Join": [
                    "",
                    [
                      "[cfn-auto-reloader-hook]\n",
                      "triggers=post.update\n",
                      "path=Resources.accountmgmtLaunchConfig.Metadata\n",
                      "action=/opt/aws/bin/cfn-init -v -c update",
                      " --stack ",
                      {
                        "Ref": "AWS::StackName"
                      },
                      " --resource accountmgmtLaunchConfig",
                      " --region ",
                      {
                        "Ref": "AWS::Region"
                      },
                      "\n",
                      "runas=root\n"
                    ]
                  ]
                },
                "group": "root",
                "mode": "000400",
                "owner": "root"
              }
            },
            "services": {
              "sysvinit": {
                "cfn-hup": {
                  "enabled": "true",
                  "ensureRunning": "true",
                  "files": [
                    "/etc/cfn/cfn-hup.conf",
                    "/etc/cfn/hooks.d/cfn-auto-reloader.conf"
                  ]
                }
              }
            }
          },
          "b-watchmaker": {
            "commands": {
              "10-watchmaker-prep": {
                "command": {
                  "Fn::Join": [
                    "",
                    [
                      "PIP_URL=https://bootstrap.pypa.io/get-pip.py && PYPI_URL=https://pypi.org/simple && curl \"$PIP_URL\" | python - --index-url=\"$PYPI_URL\" && pip install --index-url=\"$PYPI_URL\" --upgrade pip setuptools watchmaker",
                      "\n"
                    ]
                  ]
                }
              },
              "20-watchmaker-launch": {
                "command": {
                  "Fn::Join": [
                    "",
                    [
                      "watchmaker --log-level debug -n --log-dir=/var/log/watchmaker",
                      "\n"
                    ]
                  ]
                }
              }
            }
          },
          "c-preppackages": {
            "commands": {
              "10-install-epelandothers": {
                "command": {
                  "Fn::Join": [
                    "",
                    [
                      "yum -y install epel-release wget unzip cyrus-sasl-plain",
                      "\n"
                    ]
                  ]
                }
              },
              "11-enable-epel": {
                "command": {
                  "Fn::Join": [
                    "",
                    [
                      "yum-config-manager --enable epel",
                      "\n"
                    ]
                  ]
                }
              },
              "20-install-remi": {
                "command": {
                  "Fn::Join": [
                    "",
                    [
                      "yum -y install http://rpms.remirepo.net/enterprise/remi-release-7.rpm",
                      "\n"
                    ]
                  ]
                }
              },
              "21-enable-remi": {
                "command": {
                  "Fn::Join": [
                    "",
                    [
                      "yum-config-manager --enable remi-php56",
                      "\n"
                    ]
                  ]
                }
              },
              "30-install-phpanddeps": {
                "command": {
                  "Fn::Join": [
                    "",
                    [
                      "yum -y install php php-ldap php-mysqli php-gd php-imap php-mbstring php-intl php-apcu php-opcache",
                      "\n"
                    ]
                  ]
                }
              }
            },
            "packages": {
              "yum": {
                "git": []
              }
            }
          },
          "g-selinuxconf": {
            "commands": {
              "10-selinux-httpdsendmail": {
                "command": {
                  "Fn::Join": [
                    "",
                    [
                      "setsebool -P httpd_can_sendmail 1",
                      "\n"
                    ]
                  ]
                }
              },
              "20-selinux-connectdb": {
                "command": {
                  "Fn::Join": [
                    "",
                    [
                      "setsebool -P httpd_can_network_connect_db 1",
                      "\n"
                    ]
                  ]
                }
              },
              "30-selinux-connectldap": {
                "command": {
                  "Fn::Join": [
                    "",
                    [
                      "setsebool -P httpd_can_connect_ldap 1",
                      "\n"
                    ]
                  ]
                }
              }
            }
          },
          "h-mailsetup": {
            "commands": {
              "10-mailsetup-getsaslpass": {
                "command": {
                  "Fn::Join": [
                    "",
                    [
                      "aws s3 cp s3://",
                      {
                        "Ref": "accountmgmtConfigBucketName"
                      },
                      "/sasl_passwd /etc/postfix/sasl_passwd",
                      "\n"
                    ]
                  ]
                }
              },
              "20-mailsetup-getscript": {
                "command": {
                  "Fn::Join": [
                    "",
                    [
                      "aws s3 cp s3://",
                      {
                        "Ref": "accountmgmtConfigBucketName"
                      },
                      "/main_cf.sh /usr/local/bin/main_cf.sh",
                      "\n"
                    ]
                  ]
                }
              },
              "30-mailsetup-chscript": {
                "command": {
                  "Fn::Join": [
                    "",
                    [
                      "chmod 755 /usr/local/bin/main_cf.sh & chown root /usr/local/bin/main_cf.sh & chgrp root /usr/local/bin/main_cf.sh",
                      "\n"
                    ]
                  ]
                }
              },
              "40-mailsetup-runscript": {
                "command": {
                  "Fn::Join": [
                    "",
                    [
                      "/usr/local/bin/main_cf.sh",
                      "\n"
                    ]
                  ]
                }
              },
              "50-mailsetup-postmap": {
                "command": {
                  "Fn::Join": [
                    "",
                    [
                      "/sbin/postmap /etc/postfix/sasl_passwd",
                      "\n"
                    ]
                  ]
                }
              }
            }
          },
          "j-adminusersetup": {
            "commands": {
              "05-cloneawsec2ssh": {
                "command": {
                  "Fn::Join": [
                    "",
                    [
                      "cd /root/ && git clone -b usermgmt https://github.com/ewierschke/aws-ec2-ssh ",
                      "\n"
                    ]
                  ]
                }
              },
              "10-cp_adminsshusermgmt": {
                "command": {
                  "Fn::Join": [
                    "",
                    [
                      "cp /root/aws-ec2-ssh/adminusermgmt.sh /usr/local/bin/adminusermgmt.sh",
                      "\n"
                    ]
                  ]
                }
              },
              "20-ch_adminsshusermgmt": {
                "command": {
                  "Fn::Join": [
                    "",
                    [
                      "chmod 700 /usr/local/bin/adminusermgmt.sh & chown root /usr/local/bin/adminusermgmt.sh & chgrp root /usr/local/bin/adminusermgmt.sh",
                      "\n"
                    ]
                  ]
                }
              },
              "30-configure_sshd_command": {
                "command": {
                  "Fn::Join": [
                    "",
                    [
                      "sed -i 's:#AuthorizedKeysCommand none:AuthorizedKeysCommand /usr/local/bin/authorized_keys_command.sh:g' /etc/ssh/sshd_config",
                      "\n"
                    ]
                  ]
                }
              },
              "40-configure_sshd_commanduser": {
                "command": {
                  "Fn::Join": [
                    "",
                    [
                      "sed -i 's:#AuthorizedKeysCommandUser nobody:AuthorizedKeysCommandUser nobody:g' /etc/ssh/sshd_config",
                      "\n"
                    ]
                  ]
                }
              },
              "50-runadminsshusermgmt": {
                "command": {
                  "Fn::Join": [
                    "",
                    [
                      "/usr/local/bin/adminusermgmt.sh -G $(cat /usr/local/bin/admingroupname)",
                      "\n"
                    ]
                  ]
                }
              }
            },
            "files": {
              "/etc/cron.d/adminusermgmt": {
                "content": {
                  "Fn::Join": [
                    "",
                    [
                      "*/8 * * * * root /usr/local/bin/adminusermgmt.sh -G $(cat /usr/local/bin/admingroupname)",
                      "\n"
                    ]
                  ]
                },
                "group": "root",
                "mode": "000644",
                "owner": "root"
              },
              "/usr/local/bin/admingroupname": {
                "content": {
                  "Ref": "AdminIAMGroup"
                },
                "group": "root",
                "mode": "000600",
                "owner": "root"
              },
              "/usr/local/bin/authorized_keys_command.sh": {
                "content": {
                  "Fn::Join": [
                    "",
                    [
                      "#!/bin/bash -e",
                      "\n",
                      "if [ -z \"$1\" ]; then",
                      "\n",
                      "  exit 1",
                      "\n",
                      "fi",
                      "\n",
                      "aws iam list-ssh-public-keys --user-name \"$1\" --query \"SSHPublicKeys[?Status == 'Active'].[SSHPublicKeyId]\" --output text | while read KeyId; do",
                      "\n",
                      "  aws iam get-ssh-public-key --user-name \"$1\" --ssh-public-key-id \"$KeyId\" --encoding SSH --query \"SSHPublicKey.SSHPublicKeyBody\" --output text",
                      "\n",
                      "done",
                      "\n"
                    ]
                  ]
                },
                "group": "root",
                "mode": "000755",
                "owner": "root"
              }
            }
          },
          "k-discousersetup": {
            "commands": {
              "10-cp_discosshusermgmt": {
                "command": {
                  "Fn::Join": [
                    "",
                    [
                      "cp /root/aws-ec2-ssh/discousermgmt.sh /usr/local/bin/discousermgmt.sh",
                      "\n"
                    ]
                  ]
                }
              },
              "20-ch_discosshusermgmt": {
                "command": {
                  "Fn::Join": [
                    "",
                    [
                      "chmod 700 /usr/local/bin/discousermgmt.sh & chown root /usr/local/bin/discousermgmt.sh & chgrp root /usr/local/bin/discousermgmt.sh",
                      "\n"
                    ]
                  ]
                }
              },
              "30-rundiscosshusermgmt": {
                "command": {
                  "Fn::Join": [
                    "",
                    [
                      "/usr/local/bin/discousermgmt.sh -G $(cat /usr/local/bin/discogroupname)",
                      "\n"
                    ]
                  ]
                }
              }
            },
            "files": {
              "/etc/cron.d/discousermgmt": {
                "content": {
                  "Fn::Join": [
                    "",
                    [
                      "*/8 * * * * root /usr/local/bin/discousermgmt.sh -G $(cat /usr/local/bin/discogroupname)",
                      "\n"
                    ]
                  ]
                },
                "group": "root",
                "mode": "000644",
                "owner": "root"
              },
              "/usr/local/bin/discogroupname": {
                "content": {
                  "Ref": "DiscoIAMGroup"
                },
                "group": "root",
                "mode": "000600",
                "owner": "root"
              }
            }
          },
          "l-cloudwatchagentsetup": {
            "commands": {
              "10-get-agent": {
                "command": {
                  "Fn::Join": [
                    "",
                    [
                      "wget https://s3.amazonaws.com/amazoncloudwatch-agent/linux/amd64/latest/AmazonCloudWatchAgent.zip",
                      "\n"
                    ]
                  ]
                }
              },
              "20-unpack-agent": {
                "command": {
                  "Fn::Join": [
                    "",
                    [
                      "unzip AmazonCloudWatchAgent.zip -d /usr/local/bin",
                      "\n"
                    ]
                  ]
                }
              },
              "30-install-agent": {
                "command": {
                  "Fn::Join": [
                    "",
                    [
                      "cd /usr/local/bin && bash -xe /usr/local/bin/install.sh",
                      "\n"
                    ]
                  ]
                }
              },
              "40-enable-agent": {
                "command": {
                  "Fn::Join": [
                    "",
                    [
                      "systemctl enable amazon-cloudwatch-agent.service",
                      "\n"
                    ]
                  ]
                }
              },
              "50-start-agent": {
                "command": {
                  "Fn::Join": [
                    "",
                    [
                      "systemctl start amazon-cloudwatch-agent.service",
                      "\n"
                    ]
                  ]
                }
              },
              "60-get-conf": {
                "command": {
                  "Fn::Join": [
                    "",
                    [
                      "aws s3 cp s3://",
                      {
                        "Ref": "accountmgmtConfigBucketName"
                      },
                      "/accountmgmtcloudwatchagent.json /opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.json"
                    ]
                  ]
                }
              },
              "61-chmod-conf": {
                "command": {
                  "Fn::Join": [
                    "",
                    [
                      "chmod 640 /opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.json",
                      "\n"
                    ]
                  ]
                }
              },
              "62-chown-conf": {
                "command": {
                  "Fn::Join": [
                    "",
                    [
                      "chown root:root /opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.json",
                      "\n"
                    ]
                  ]
                }
              },
              "70-inject-custom-agent-config": {
                "command": {
                  "Fn::Join": [
                    "",
                    [
                      "/opt/aws/amazon-cloudwatch-agent/bin/",
                      "amazon-cloudwatch-agent-ctl",
                      " -a fetch-config -m ec2 -c",
                      " file:/opt/aws/amazon-cloudwatch-agent/etc/",
                      "amazon-cloudwatch-agent.json -s"
                    ]
                  ]
                }
              }
            }
          },
          "m-finalize": {
            "commands": {
              "10-signal-success": {
                "command": {
                  "Fn::Join": [
                    "",
                    [
                      "cfn-signal -e 0 ",
                      "   --stack ",
                      {
                        "Ref": "AWS::StackName"
                      },
                      "   --resource accountmgmtAutoScalingGroup",
                      "   --region ",
                      {
                        "Ref": "AWS::Region"
                      },
                      ";sleep 30;reboot now\n"
                    ]
                  ]
                },
                "ignoreErrors": "true"
              }
            }
          }
        }
      },
      "Properties": {
        "BlockDeviceMappings": [
          {
            "DeviceName": "/dev/sda1",
            "Ebs": {
              "VolumeSize": "20",
              "VolumeType": "gp2",
              "DeleteOnTermination": "true"
            }
          }
        ],
        "IamInstanceProfile": {
          "Ref": "accountmgmtInstanceProfile"
        },
        "ImageId": {
          "Ref": "AmiId"
        },
        "InstanceType": {
          "Ref": "InstanceType"
        },
        "KeyName": {
          "Ref": "KeyPairName"
        },
        "SecurityGroups": [
          {
            "Ref": "SecurityGroupIdInstance"
          }
        ],
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "",
              [
                "#!/bin/bash -xe\n\n",
                "# Export cert bundle ENVs\n",
                "export AWS_CA_BUNDLE=/etc/pki/tls/certs/ca-bundle.crt\n",
                "export REQUESTS_CA_BUNDLE=/etc/pki/tls/certs/ca-bundle.crt\n\n",
                "# Get pip\n",
                "PIP_URL=https://bootstrap.pypa.io/get-pip.py\n",
                "PYPI_URL=https://pypi.org/simple\n",
                "curl \"$PIP_URL\" | python - --index-url=\"$PYPI_URL\"\n",
                "\n\n",
                "# Add pip to path\n",
                "hash pip 2> /dev/null || ",
                "PATH=\"${PATH}:/usr/local/bin\"",
                "\n\n",
                "# Upgrade pip and setuptools\n",
                "PYPI_URL=https://pypi.org/simple\n",
                "PYPI_HOST=$(echo $PYPI_URL |sed -e \"s/[^/]*\\/\\/\\([^@]*@\\)\\?\\([^:/]*\\).*/\\2/\")\n",
                "pip install",
                " --index-url=\"$PYPI_URL\"",
                " --trusted-host=\"$PYPI_HOST\"",
                " --upgrade pip setuptools\n\n",
                "# Fix python urllib3 warnings\n",
                "yum -y install gcc python-devel libffi-devel openssl-devel\n",
                "pip install",
                " --index-url=\"$PYPI_URL\"",
                " --upgrade cffi\n",
                "pip install",
                " --index-url=\"$PYPI_URL\"",
                " --upgrade pyopenssl ndg-httpsclient pyasn1 'cryptography<2.2;python_version<\"2.7\"' 'cryptography;python_version>=\"2.7\"'",
                "\n\n",
                "if [[ $(rpm --quiet -q aws-cfn-bootstrap || pip show --quiet aws-cfn-bootstrap)$? -ne 0 ]]\n",
                "then\n",
                "  # Get cfn utils\n",
                "  pip install",
                " --index-url=\"$PYPI_URL\"",
                " --upgrade --upgrade-strategy only-if-needed https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz\n\n",
                "  # Fixup cfn utils\n",
                "  INITDIR=$(find -L /opt/aws/apitools/cfn-init/init -name redhat",
                " 2> /dev/null || echo /usr/init/redhat)\n",
                "  chmod 775 ${INITDIR}/cfn-hup\n",
                "  ln -f -s ${INITDIR}/cfn-hup /etc/rc.d/init.d/cfn-hup\n",
                "  chkconfig --add cfn-hup\n",
                "  chkconfig cfn-hup on\n",
                "  mkdir -p /opt/aws/bin\n",
                "  BINDIR=$(find -L /opt/aws/apitools/cfn-init -name bin",
                " 2> /dev/null || echo /usr/bin)\n",
                "  for SCRIPT in cfn-elect-cmd-leader cfn-get-metadata cfn-hup",
                " cfn-init cfn-send-cmd-event cfn-send-cmd-result cfn-signal\n",
                "  do\n",
                "    ln -s ${BINDIR}/${SCRIPT} /opt/aws/bin/${SCRIPT} 2> /dev/null || ",
                "    echo Skipped symbolic link, /opt/aws/bin/${SCRIPT} already exists\n",
                "  done\n\n",
                "fi\n\n",
                "# Remove gcc now that it is no longer needed\n",
                "yum -y remove gcc --setopt=clean_requirements_on_remove=1\n\n",
                "# Add cfn-signal to path\n",
                "hash cfn-signal 2> /dev/null || ",
                "PATH=\"${PATH}:/usr/local/bin:/opt/aws/bin\"",
                "\n\n",
                "# Execute cfn-init\n",
                "/opt/aws/bin/cfn-init -v -c NewConf",
                " --stack ",
                {
                  "Ref": "AWS::StackName"
                },
                " --resource accountmgmtLaunchConfig",
                " --region ",
                {
                  "Ref": "AWS::Region"
                },
                " ||",
                " ( echo 'ERROR: cfn-init failed! Aborting!';",
                " /opt/aws/bin/cfn-signal -e 1",
                "  --stack ",
                {
                  "Ref": "AWS::StackName"
                },
                "  --resource accountmgmtAutoScalingGroup",
                "  --region ",
                {
                  "Ref": "AWS::Region"
                },
                ";",
                " exit 1",
                " )\n\n"
              ]
            ]
          }
        }
      },
      "Type": "AWS::AutoScaling::LaunchConfiguration"
    }
  }
}
